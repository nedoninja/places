Index: prg/prg/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for prg project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.2.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.2/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.2/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-klur0f_3hj24i*w++@7-4v=0wr1im7!y-5-d$)7r=2je6)zx1e'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'app'\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'prg.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'prg.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\nLOGIN_REDIRECT_URL = '/'  \r\nLOGOUT_REDIRECT_URL = '/' 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prg/prg/settings.py b/prg/prg/settings.py
--- a/prg/prg/settings.py	(revision 3a60c082df4751e7b7fb8a626c0b27ca2108b1a2)
+++ b/prg/prg/settings.py	(date 1745059950492)
@@ -123,4 +123,12 @@
 DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
 
 LOGIN_REDIRECT_URL = '/'  
-LOGOUT_REDIRECT_URL = '/' 
\ No newline at end of file
+LOGOUT_REDIRECT_URL = '/'
+
+EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
+EMAIL_HOST = 'smtp.yandex.ru'
+EMAIL_PORT = 587
+EMAIL_USE_TLS = True
+EMAIL_HOST_USER = 'd1arama@yandex.ru'
+EMAIL_HOST_PASSWORD = 'qpetjwgrdzkdlkvf'
+DEFAULT_FROM_EMAIL = 'd1arama@yandex.ru'
\ No newline at end of file
Index: prg/app/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\n\r\n# Create your models here.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prg/app/models.py b/prg/app/models.py
--- a/prg/app/models.py	(revision 3a60c082df4751e7b7fb8a626c0b27ca2108b1a2)
+++ b/prg/app/models.py	(date 1745059717889)
@@ -1,3 +1,7 @@
 from django.db import models
+from django.contrib.auth.models import User
 
-# Create your models here.
+class EmailConfirmationToken(models.Model):
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+    token = models.CharField(max_length=64, unique=True)
+    created_at = models.DateTimeField(auto_now_add=True)
\ No newline at end of file
Index: prg/app/templates/register.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><h2>Register</h2>\r\n<form method=\"post\">\r\n    {% csrf_token %}\r\n    <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\r\n    <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\r\n    <button type=\"submit\">Регистрация</button>\r\n</form>\r\n<p>Есть аккаунт <a href=\"/login/\">Логин</a></p>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prg/app/templates/register.html b/prg/app/templates/register.html
--- a/prg/app/templates/register.html	(revision 3a60c082df4751e7b7fb8a626c0b27ca2108b1a2)
+++ b/prg/app/templates/register.html	(date 1745059749420)
@@ -2,7 +2,7 @@
 <form method="post">
     {% csrf_token %}
     <input type="text" name="username" placeholder="Username" required>
+    <input type="email" name="email" placeholder="Email" required> <!-- Добавлено поле email -->
     <input type="password" name="password" placeholder="Password" required>
     <button type="submit">Регистрация</button>
-</form>
-<p>Есть аккаунт <a href="/login/">Логин</a></p>
\ No newline at end of file
+</form>
\ No newline at end of file
Index: prg/app/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.http import HttpResponse\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth import login, logout, authenticate\r\nfrom django.contrib.auth.models import User\r\nfrom django.contrib import messages\r\n\r\ndef register(request):\r\n    if request.method == 'POST':\r\n        username = request.POST['username']\r\n        password = request.POST['password']\r\n        \r\n        if User.objects.filter(username=username).exists():\r\n            messages.error(request, 'Username already exists')\r\n            return redirect('register')\r\n        \r\n        user = User.objects.create_user(username=username, password=password)\r\n        login(request, user)\r\n        return redirect('home')\r\n    \r\n    return render(request, 'register.html')\r\n\r\ndef user_login(request):\r\n    if request.method == 'POST':\r\n        username = request.POST['username']\r\n        password = request.POST['password']\r\n        user = authenticate(request, username=username, password=password)\r\n        \r\n        if user is not None:\r\n            login(request, user)\r\n            return redirect('home')\r\n        else:\r\n            messages.error(request, 'Invalid username or password')\r\n    \r\n    return render(request, 'login.html')\r\n\r\ndef user_logout(request):\r\n    logout(request)\r\n    return redirect('home')\r\n\r\ndef index(request):\r\n    return render(request, 'index.html')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prg/app/views.py b/prg/app/views.py
--- a/prg/app/views.py	(revision 3a60c082df4751e7b7fb8a626c0b27ca2108b1a2)
+++ b/prg/app/views.py	(date 1745059974214)
@@ -4,38 +4,89 @@
 from django.contrib.auth.models import User
 from django.contrib import messages
 
+from django.core.mail import send_mail
+from .models import EmailConfirmationToken
+import uuid
+
+
 def register(request):
     if request.method == 'POST':
         username = request.POST['username']
+        email = request.POST['email']
         password = request.POST['password']
-        
+
+        # Валидация
         if User.objects.filter(username=username).exists():
             messages.error(request, 'Username already exists')
             return redirect('register')
-        
-        user = User.objects.create_user(username=username, password=password)
-        login(request, user)
-        return redirect('home')
-    
+
+        if User.objects.filter(email=email).exists():
+            messages.error(request, 'Email already registered')
+            return redirect('register')
+
+        # Создание пользователя
+        user = User.objects.create_user(
+            username=username,
+            email=email,
+            password=password,
+            is_active=False  # Пользователь неактивен до подтверждения
+        )
+
+        # Генерация токена
+        token = uuid.uuid4().hex
+        EmailConfirmationToken.objects.create(user=user, token=token)
+
+        # Отправка письма
+        confirmation_link = f"http://{request.get_host()}/confirm/{token}/"
+        send_mail(
+            'Подтверждение регистрации',
+            f'Перейдите по ссылке для подтверждения: {confirmation_link}',
+            'd1arama@yandex.ru',
+            [email],
+            fail_silently=False,
+        )
+
+        messages.success(request, 'Проверьте почту для подтверждения регистрации!')
+        return redirect('login')
+
     return render(request, 'register.html')
 
+
+def confirm_email(request, token):
+    try:
+        token_obj = EmailConfirmationToken.objects.get(token=token)
+        user = token_obj.user
+        user.is_active = True
+        user.save()
+        token_obj.delete()
+        messages.success(request, 'Email успешно подтвержден! Теперь вы можете войти.')
+    except EmailConfirmationToken.DoesNotExist:
+        messages.error(request, 'Неверная ссылка подтверждения')
+
+    return redirect('login')
+
+
 def user_login(request):
     if request.method == 'POST':
         username = request.POST['username']
         password = request.POST['password']
         user = authenticate(request, username=username, password=password)
-        
+
         if user is not None:
-            login(request, user)
-            return redirect('home')
+            if user.is_active:
+                login(request, user)
+                return redirect('home')
+            else:
+                messages.error(request, 'Аккаунт не активирован! Проверьте почту')
         else:
             messages.error(request, 'Invalid username or password')
-    
+
     return render(request, 'login.html')
 
 def user_logout(request):
     logout(request)
     return redirect('home')
 
+
 def index(request):
-    return render(request, 'index.html')
\ No newline at end of file
+    return render(request, 'index.html')
Index: prg/prg/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for prg project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.2/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\nfrom app import views\r\n\r\nurlpatterns = [\r\n    path('', views.index, name='home'),\r\n    path('register/', views.register, name='register'),\r\n    path('login/', views.user_login, name='login'),\r\n    path('logout/', views.user_logout, name='logout'),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prg/prg/urls.py b/prg/prg/urls.py
--- a/prg/prg/urls.py	(revision 3a60c082df4751e7b7fb8a626c0b27ca2108b1a2)
+++ b/prg/prg/urls.py	(date 1745060048124)
@@ -16,11 +16,15 @@
 """
 from django.contrib import admin
 from django.urls import path
+
 from app import views
 
+#from .app import views
+
 urlpatterns = [
     path('', views.index, name='home'),
     path('register/', views.register, name='register'),
+    path('confirm/<str:token>/', views.confirm_email, name='confirm_email'),
     path('login/', views.user_login, name='login'),
     path('logout/', views.user_logout, name='logout'),
 ]
